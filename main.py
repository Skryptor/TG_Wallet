import telebot
from sqlalchemy import func
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import configparser
from models import User, Category, CategoryType, Transaction
from db import SessionLocal
from contextlib import closing
import logging
from datetime import datetime, timedelta
from calendar import monthrange

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

config = configparser.ConfigParser()
config.read('settings.ini')
token = config["TOKEN"]['token']
bot = telebot.TeleBot(token)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞
user_report_state = {}
DATE_FORMAT = "%Y-%m-%d"


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É'),
        KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'),
        KeyboardButton('–û—Ç—á—ë—Ç'),
        KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
        KeyboardButton('–ü–æ–º–æ—â—å')
    )
    return markup


def get_user(session, message):
    telegram_id = message.from_user.id
    user = session.query(User).filter_by(telegram_id=telegram_id).first()
    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start", reply_markup=create_keyboard())
        return None
    return user


@bot.message_handler(commands=['start'])
def handle_start(message: Message):
    try:
        with closing(SessionLocal()) as session:
            telegram_id = message.from_user.id
            user = session.query(User).filter_by(telegram_id=telegram_id).first()
            if not user:
                user = User(
                    telegram_id=telegram_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                session.add(user)
                session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
                help_text = (
                    "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
                    "üí° –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help"
                )
                bot.reply_to(message, help_text, reply_markup=create_keyboard())
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {telegram_id}")
                show_help(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                     reply_markup=create_keyboard())


def show_help(message: Message):
    help_text = (
        "üí° –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:\n"
        "—Ç—Ä–∞—Ç–∞ <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n"
        "–ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞—Ç–∞ 300 –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥:\n"
        "–¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n"
        "–ü—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n\n"
        "üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç—á—ë—Ç' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /report\n"
        "üìÅ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /add_category\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ üëá"
    )
    bot.reply_to(message, help_text, reply_markup=create_keyboard())


@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() == '–ø–æ–º–æ—â—å')
def handle_help(message: Message):
    show_help(message)


@bot.message_handler(commands=['add_category'])
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() == '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
def handle_add_category(message: Message):
    bot.reply_to(message,
                 "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n—Ç–∏–ø –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä—ã:\n—Ç—Ä–∞—Ç–∞ –∞–ø—Ç–µ–∫–∞\n–¥–æ—Ö–æ–¥ —Ñ—Ä–∏–ª–∞–Ω—Å")
    bot.register_next_step_handler(message, save_new_category)


def save_new_category(message: Message):
    try:
        with closing(SessionLocal()) as session:
            user = get_user(session, message)
            if not user:
                return

            parts = message.text.strip().lower().split()
            if len(parts) != 2:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=create_keyboard())
                return

            type_text, category_name = parts
            type_map = {"—Ç—Ä–∞—Ç–∞": CategoryType.expense, "–¥–æ—Ö–æ–¥": CategoryType.income}

            if type_text not in type_map:
                bot.reply_to(message, "‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '—Ç—Ä–∞—Ç–∞' –∏–ª–∏ '–¥–æ—Ö–æ–¥'.", reply_markup=create_keyboard())
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            exists = session.query(Category).filter_by(
                user_id=user.id,
                name=category_name,
                type=type_map[type_text]
            ).first()

            if exists:
                bot.reply_to(message, f"‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=create_keyboard())
            else:
                category = Category(
                    user_id=user.id,
                    name=category_name,
                    type=type_map[type_text]
                )
                session.add(category)
                session.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                bot.reply_to(message, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                     reply_markup=create_keyboard())


@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() in ['–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É', '–¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥'] or
                                    (len(m.text.split()) > 0 and m.text.split()[0].lower() in ['—Ç—Ä–∞—Ç–∞', '–¥–æ—Ö–æ–¥']))
def handle_transaction(message: Message):
    try:
        with closing(SessionLocal()) as session:
            user = get_user(session, message)
            if not user:
                return

            # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
            if message.text.strip().lower() in ['–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É', '–¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥']:
                example = "—Ç—Ä–∞—Ç–∞ 300 –ø—Ä–æ–¥—É–∫—Ç—ã" if "—Ç—Ä–∞—Ç—É" in message.text.lower() else "–¥–æ—Ö–æ–¥ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
                bot.reply_to(message, f"–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{example}")
                return

            parts = message.text.strip().lower().split()
            if len(parts) < 3:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞—Ç–∞ 300 –∫–∞—Ñ–µ",
                             reply_markup=create_keyboard())
                return

            type_text = parts[0]
            try:
                amount = float(parts[1])
                category_name = parts[2]
            except ValueError:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞—Ç–∞ 300 –∫–∞—Ñ–µ",
                             reply_markup=create_keyboard())
                return

            type_map = {"—Ç—Ä–∞—Ç–∞": CategoryType.expense, "–¥–æ—Ö–æ–¥": CategoryType.income}

            if type_text not in type_map:
                bot.reply_to(message, "‚ùå –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '—Ç—Ä–∞—Ç–∞' –∏–ª–∏ '–¥–æ—Ö–æ–¥'. –ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞—Ç–∞ 300 –∫–∞—Ñ–µ",
                             reply_markup=create_keyboard())
                return

            # –ù–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = session.query(Category).filter_by(
                user_id=user.id,
                name=category_name,
                type=type_map[type_text]
            ).first()

            if not category:
                bot.reply_to(message, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å –µ—ë —á–µ—Ä–µ–∑ /add_category",
                             reply_markup=create_keyboard())
                return

            # –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                user_id=user.id,
                category_id=category.id,
                amount=amount,
                date=datetime.now()
            )
            session.add(transaction)
            session.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {amount}‚ÇΩ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

            emoji = "üí∏" if type_text == "—Ç—Ä–∞—Ç–∞" else "üí∞"
            bot.reply_to(message,
                         f"{emoji} {'–î–æ—Ö–æ–¥' if type_text == '–¥–æ—Ö–æ–¥' else '–¢—Ä–∞—Ç–∞'} {amount}‚ÇΩ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                         reply_markup=create_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                     reply_markup=create_keyboard())


@bot.message_handler(commands=['report'])
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() == '–æ—Ç—á—ë—Ç')
def handle_report(message: Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_report_state[message.from_user.id] = {
            'step': 'select_period_type',
            'start_date': None,
            'end_date': None
        }

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            KeyboardButton('–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥'),
            KeyboardButton('–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å'),
            KeyboardButton('–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'),
            KeyboardButton('–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'),
            KeyboardButton('–¢–µ–∫—É—â–∏–π –≥–æ–¥'),
            KeyboardButton('–í—Å–µ –≤—Ä–µ–º—è'),
            KeyboardButton('–ù–∞–∑–∞–¥')
        )

        bot.reply_to(message, "üìÜ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=create_keyboard())


@bot.message_handler(func=lambda m: user_report_state.get(m.from_user.id, {}).get('step') == 'select_period_type')
def handle_period_type_selection(message: Message):
    try:
        user_id = message.from_user.id
        period_type = message.text.strip().lower()
        state = user_report_state.get(user_id, {})

        if period_type == '–Ω–∞–∑–∞–¥':
            bot.reply_to(message, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_keyboard())
            if user_id in user_report_state:
                del user_report_state[user_id]
            return

        today = datetime.now().date()

        if period_type == '—Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å':
            state['start_date'] = today
            state['end_date'] = today + timedelta(days=1)
            state['step'] = 'generate_report'
            generate_report(message, state)

        elif period_type == '—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
            # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            start_date = today - timedelta(days=today.weekday())
            state['start_date'] = start_date
            state['end_date'] = start_date + timedelta(days=7)
            state['step'] = 'generate_report'
            generate_report(message, state)

        elif period_type == '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü':
            start_date = today.replace(day=1)
            # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
            _, last_day = monthrange(today.year, today.month)
            state['start_date'] = start_date
            state['end_date'] = start_date + timedelta(days=last_day)
            state['step'] = 'generate_report'
            generate_report(message, state)

        elif period_type == '—Ç–µ–∫—É—â–∏–π –≥–æ–¥':
            start_date = today.replace(month=1, day=1)
            end_date = today.replace(month=12, day=31)
            state['start_date'] = start_date
            state['end_date'] = end_date
            state['step'] = 'generate_report'
            generate_report(message, state)

        elif period_type == '–≤—Å–µ –≤—Ä–µ–º—è':
            state['start_date'] = None
            state['end_date'] = None
            state['step'] = 'generate_report'
            generate_report(message, state)

        elif period_type == '–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥':
            state['step'] = 'select_start_date'
            bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-01):")

        else:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=create_keyboard())


@bot.message_handler(func=lambda m: user_report_state.get(m.from_user.id, {}).get('step') == 'select_start_date')
def handle_start_date_selection(message: Message):
    try:
        user_id = message.from_user.id
        state = user_report_state.get(user_id, {})

        try:
            start_date = datetime.strptime(message.text, DATE_FORMAT).date()
            state['start_date'] = start_date
            state['step'] = 'select_end_date'
            bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15):")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=create_keyboard())


@bot.message_handler(func=lambda m: user_report_state.get(m.from_user.id, {}).get('step') == 'select_end_date')
def handle_end_date_selection(message: Message):
    try:
        user_id = message.from_user.id
        state = user_report_state.get(user_id, {})

        try:
            end_date = datetime.strptime(message.text, DATE_FORMAT).date()
            state['end_date'] = end_date + timedelta(days=1)  # –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –∫–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å
            state['step'] = 'generate_report'
            generate_report(message, state)
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=create_keyboard())


def generate_report(message: Message, state: dict):
    try:
        with closing(SessionLocal()) as session:
            user = get_user(session, message)
            if not user:
                if message.from_user.id in user_report_state:
                    del user_report_state[message.from_user.id]
                return

            start_date = state.get('start_date')
            end_date = state.get('end_date')

            # –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—É–º–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            query = session.query(
                Category.name,
                Category.type,
                func.sum(Transaction.amount).label('total')
            ).join(Transaction.category).filter(
                Transaction.user_id == user.id
            )

            if start_date and end_date:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                start_datetime = datetime.combine(start_date, datetime.min.time())
                end_datetime = datetime.combine(end_date, datetime.min.time())

                query = query.filter(Transaction.date >= start_datetime, Transaction.date < end_datetime)
                period_title = f"üìä –û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {(end_date - timedelta(days=1)).strftime('%d.%m.%Y')}"
            else:
                period_title = "üìä –û—Ç—á—ë—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"

            results = query.group_by(Category.name, Category.type).all()

            if not results:
                bot.reply_to(message, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", reply_markup=create_keyboard())
                if message.from_user.id in user_report_state:
                    del user_report_state[message.from_user.id]
                return

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            income_total = 0
            expense_total = 0
            income_details = []
            expense_details = []

            for name, ctype, total in results:
                if ctype == CategoryType.income:
                    income_total += total
                    income_details.append((name, total))
                else:
                    expense_total += total
                    expense_details.append((name, total))

            balance = income_total - expense_total

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = [period_title]

            if income_details:
                report.append("\nüí∞ –î–æ—Ö–æ–¥—ã:")
                for name, amount in income_details:
                    report.append(f"  - {name}: {amount:.2f}‚ÇΩ")
                report.append(f"  –ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥—ã: {income_total:.2f}‚ÇΩ")

            if expense_details:
                report.append("\nüí∏ –†–∞—Å—Ö–æ–¥—ã:")
                for name, amount in expense_details:
                    report.append(f"  - {name}: {amount:.2f}‚ÇΩ")
                report.append(f"  –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã: {expense_total:.2f}‚ÇΩ")

            report.append(f"\nüìà –ë–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
            if start_date and end_date:
                tx_count = session.query(Transaction).filter(
                    Transaction.user_id == user.id,
                    Transaction.date >= start_datetime,
                    Transaction.date < end_datetime
                ).count()
            else:
                tx_count = session.query(Transaction).filter_by(user_id=user.id).count()

            report.append(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")

            bot.reply_to(message, "\n".join(report), reply_markup=create_keyboard())

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.from_user.id in user_report_state:
                del user_report_state[message.from_user.id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                     reply_markup=create_keyboard())
        if message.from_user.id in user_report_state:
            del user_report_state[message.from_user.id]


@bot.message_handler(func=lambda m: True)
def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.text:
        return

    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                     reply_markup=create_keyboard())
    else:
        bot.reply_to(message, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üò¢\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help", reply_markup=create_keyboard())


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling()